# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

{ lib, nodejs, stdenv, fetchurl, writeText, writeShellScriptBin, git, cacert, gnused }:
{ src, symlinkPackages ? false, overrideAttrs ? null, netrcFilePath ? null, secretsEnvVars ? null, ... } @ args:

let

  yarnPath = ./@@YARN_PATH@@;
  yarnRelativePathString = "./@@YARN_PATH@@";
  yarnLock = ./@@LOCKFILE@@;
  packageJson = ./package.json;
  yarnrcYaml = builtins.path {
    path = ./.yarnrc.yml;
    name = "yarnrc.yml";
  };
  yarnPlugins = builtins.path {
    path = ./.yarn/plugins;
    name = "yarnPlugins";
  };

  cacheFolder = @@CACHE_FOLDER@@;

  # Call overrideAttrs on a derivation if a function is provided.
  optionalOverride = fn: drv:
    if fn == null then drv else drv.overrideAttrs fn;

  # Common attributes between Yarn derivations.
  drvCommon = {
    # Make sure the build uses the right Node.js version everywhere.
    buildInputs = [ nodejs ];
    # Tell node-gyp to use the provided Node.js headers for native code builds.
    npm_config_nodedir = nodejs;
    # Tell node-pre-gyp to never fetch binaries / always build from source.
    npm_config_build_from_source = "true";
    # Defines the shell alias to run Yarn.
    postHook = ''
      yarn() {
        CI=1 node "${yarnPath}" "$@"
      }
    '';
  };

  setupProjectFiles = ''
    # package.json cannot be symlinked since when executing "yarn run ...", yarn
    # will follow the symlink and consider the location of the original file as
    # the projects root directory.
    cp ${packageJson} package.json
    ln -s ${yarnLock} yarn.lock
    ln -s ${yarnrcYaml} .yarnrc.yml

    mkdir -p .yarn
    ln -s ${yarnPlugins} .yarn/plugins

    mkdir -p $(dirname ${yarnRelativePathString})
    ln -s ${yarnPath} ${yarnRelativePathString}
  '';

  checkSandboxPathExists = writeShellScriptBin "check-sandbox-file-exists" ''
    set -ueo pipefail

    file_path=$1

    if ! test -e "$file_path"
    then
      echo >&2 "Error: $file_path does not exist or cannot be accessed due to permissions!"
      echo >&2 "  Make sure it's added to extra-sandbox-paths and that nixbld"
      echo >&2 "  user group has read access to it."
      exit 1
    fi
  '';

  linkNetrcFile = writeShellScriptBin "link-netrc-file" ''
    set -ueo pipefail

    netrc_file_path=$1
    home=$2

    ${checkSandboxPathExists}/bin/check-sandbox-file-exists "$netrc_file_path"

    if ! test -d "$home";
    then
      echo >&2 "given HOME path (''${home}) does not exist or is not a directory"
      exit 1
    fi

    echo >&2 "linking .netrc file at ''${netrc_file_path} to ''${home}"

    ln -s "$netrc_file_path" "$home"
  '';

  exportEnvVarsFromFilesIfAny = envVarNamesToPaths:
    if envVarNamesToPaths != null
    # build a list of export statement
    then lib.concatStringsSep "\n" (lib.mapAttrsToList
      (name: path: ''
        check-sandbox-file-exists "${path}"
        export ${name}=$(cat "${path}")
      '')
      envVarNamesToPaths
    )
    else ""
  ;

  # Create derivations for fetching dependencies.
  cacheDrvs = let
    builder = builtins.toFile "builder.sh" ''
      source $stdenv/setup

      ${exportEnvVarsFromFilesIfAny secretsEnvVars}

      home=$TMP

      ${
        if netrcFilePath != null
        then ''link-netrc-file "${netrcFilePath}" "$home"''
        else ""
      }

      build_dir=$TMP/build
      mkdir -p $build_dir
      cd $build_dir

      ${setupProjectFiles}

      mkdir -p ${cacheFolder}
      YARN_CACHE_FOLDER=$(pwd)/${cacheFolder}

      HOME="$home" \
        YARN_CACHE_FOLDER="$YARN_CACHE_FOLDER" \
        CI=1 \
        node '${yarnPath}' nixify fetch-one $locator

      # Because we change the cache dir, Yarn may generate a different name.
      output_filename_stripped=$(sed 's/-[^-]*\.[^-]*$//' <<< "$outputFilename")

      mv "$YARN_CACHE_FOLDER/$output_filename_stripped"-* $out
    '';
  in lib.mapAttrs (locator: { filename, sha512 }: stdenv.mkDerivation {
    inherit builder locator;
    # We need .zip extension since without pnp will not look inside the archive.
    name = lib.strings.sanitizeDerivationName locator + ".zip";
    buildInputs = [ nodejs ];
    nativeBuildInputs = [ git cacert linkNetrcFile checkSandboxPathExists ];
    outputFilename = filename;
    outputHashMode = "flat";
    outputHashAlgo = "sha512";
    outputHash = sha512;
  }) cacheEntries;

  # Create a shell snippet to copy dependencies from a list of derivations.
  mkCacheBuilderForDrvs = symlinkPackages: drvs:
    writeText "collect-cache.sh" (lib.concatMapStrings (drv: ''
      ${if symlinkPackages then "ln -s" else "cp"} ${drv} '${drv.outputFilename}'
    '') drvs);

#@@ IF NEED_ISOLATED_BUILD_SUPPRORT
  # Create a shell snippet to copy dependencies from a list of locators.
  mkCacheBuilderForLocators = let
    pickCacheDrvs = map (locator: cacheDrvs.${locator});
  in locators:
    mkCacheBuilderForDrvs false (pickCacheDrvs locators);

  # Create a derivation that builds a node-pre-gyp module in isolation.
  mkIsolatedBuild = { pname, version, reference, locators }: stdenv.mkDerivation (drvCommon // {
    inherit pname version;
    phases = [ "buildPhase" "installPhase" ];

    buildPhase = ''
      runHook preBuild

      mkdir -p .yarn/cache
      pushd .yarn/cache > /dev/null
      source ${mkCacheBuilderForLocators locators}
      popd > /dev/null

      echo '{ "dependencies": { "${pname}": "${reference}" } }' > package.json
      install -m 0600 ${yarnLock} ./yarn.lock

      yarn_global_folder="$TMP" \
        YARN_ENABLE_IMMUTABLE_INSTALLS=false \
        yarn --immutable-cache

      runHook postBuild
    '';

    installPhase = ''
      unplugged=( .yarn/unplugged/${pname}-*/node_modules/* )
      if [[ ! -e "''${unplugged[@]}" ]]; then
        echo >&2 "Could not find the unplugged path for ${pname}"
        exit 1
      fi

      mv "$unplugged" $out
    '';
  });
#@@ ENDIF NEED_ISOLATED_BUILD_SUPPRORT

  # Derivation with content of .yarn/cache and .pnp.cjs
  deps = stdenv.mkDerivation (drvCommon // {
    name = "@@PROJECT_NAME@@-deps";
    # Disable Nixify plugin to save on some unnecessary processing.
    yarn_enable_nixify = "false";
    nativeBuildInputs = [gnused];

    configurePhase = ''
      ${setupProjectFiles}

      # Copy over the Yarn cache.
      mkdir -p ${cacheFolder}
      pushd '${cacheFolder}' > /dev/null
      source ${mkCacheBuilderForDrvs symlinkPackages (lib.attrValues cacheDrvs)}
      popd > /dev/null

      # Yarn may need a writable home directory.
      export yarn_global_folder="$TMP"

      # Some node-gyp calls may call out to npm, which could fail due to an
      # read-only home dir.
      export HOME="$TMP"

      # running preConfigure after the cache is populated allows for
      # preConfigure to contain substituteInPlace for dependencies as well as the
      # main project. This is necessary for native bindings that maybe have
      # hardcoded values.
      runHook preConfigure

@@ISOLATED_INTEGRATION@@

      # Run normal Yarn install to complete dependency installation.
      # YARN_VIRTUAL_FOLDER is set this way to make it easy to replace in
      # installPhase below, so that in the end virtual paths resolve to
      # packages in nix store.
      YARN_CACHE_FOLDER=$(pwd)/${cacheFolder} \
        YARN_VIRTUAL_FOLDER=$(pwd)/__virtual__ \
        yarn install --immutable --immutable-cache

      runHook postConfigure
    '';

    dontUnpack = true;
    dontBuild = true;

    installPhase = ''
      runHook preInstall

      # This needs nested under /nix/store at the same depth as the the location
      # of the source in the output of project derivation so that
      # relative_path_to_nix_store is valid from the final source.
      output_dir=$out/libexec/deps
      mkdir -p $output_dir

      mkdir -p $output_dir/.yarn
      test -d .yarn/cache && mv .yarn/cache $output_dir/.yarn/cache
      test -d .yarn/unplugged && mv .yarn/unplugged $output_dir/.yarn/unplugged

      mv .pnp.cjs $output_dir/.pnp.cjs

      cd $output_dir

      # Replace references from .pnp.cjs to symlinks in .yarn/cache with
      # relative paths. Needed because of: https://github.com/yarnpkg/berry/issues/3514

      # sed helpers
      escape_sed_replacement () {
        echo "$1" | sed -e 's/[\/&]/\\&/g'
      }

      escape_sed_pattern () {
        echo "$1" | sed -e 's/[]\/$*.^[]/\\&/g'
      }
      echo >&2 "fixup paths in .pnp.cjs"

      # TODO: this would be best done with a plugin which would resolve symlinks
      #   to actual store paths during yarn install.
      relative_path_to_nix_store=$(realpath --relative-to=. /nix/store)

      unplugged_path_relative_to_nix_store=$(realpath --relative-to=/nix/store $output_dir/.yarn/unplugged)
      echo unplugged_path_relative_to_nix_store: $unplugged_path_relative_to_nix_store

      sed -E -i \
        -e "s/$(escape_sed_pattern './.yarn/cache')/$(escape_sed_replacement "$relative_path_to_nix_store")/g" \
        -e "s/$(escape_sed_pattern './.yarn/unplugged')/$(escape_sed_replacement "''${relative_path_to_nix_store}/''${unplugged_path_relative_to_nix_store}")/g" \
        -e "s/$(escape_sed_pattern '0/.yarn/cache')/0/g" \
        -e "s/$(escape_sed_pattern './__virtual__')/$(escape_sed_replacement "$relative_path_to_nix_store/__virtual__")/g" \
        .pnp.cjs

      for path in .yarn/cache/*; do
        # Skip empty
        test -z "$path" && continue

        file_name_in_pnp=$(basename "$path")
        file_name=$(basename $(realpath --relative-to=. "$path"))

        # echo >&2 "replace for path:   $path"
        # echo >&2 "  file_name_in_pnp: $file_name_in_pnp"
        # echo >&2 "  with file_name:   $file_name"

        sed -i "s/$(escape_sed_pattern "$file_name_in_pnp")/$(escape_sed_replacement "$file_name")/" .pnp.cjs
      done

      mkdir ../pnp
      mv .pnp.cjs ../pnp
      runHook postInstall
    '';

    passthru = {
      inherit nodejs;
    };
  });

  # Main project derivation.
  project = stdenv.mkDerivation (drvCommon // {
    inherit src;
    name = "@@PROJECT_NAME@@";

    configurePhase = ''
      ${setupProjectFiles}
      # We can't symlink this one since it doesn't work as a symlink due to
      # packageLocations within it being relative path to this files locations
      # real location, therefore it needs to be located at the root of the
      # project for relative and workspace scoped imports to work.
      cp ${deps}/libexec/pnp/.pnp.cjs .pnp.cjs

      runHook postConfigure
    '';

    dontBuild = true;

    installPhase = ''
      runHook preInstall

      mkdir -p $out/libexec $out/bin

      # Move the entire project to the output directory.

      mv $PWD "$out/libexec/$name"
      cd "$out/libexec/$name"

      # Invoke a plugin internal command to setup binaries.
      yarn nixify install-bin $out/bin

      runHook postInstall
    '';

    passthru = {
      inherit nodejs;
    };
  });

@@CACHE_ENTRIES@@
@@ISOLATED@@
in optionalOverride overrideAttrs project
